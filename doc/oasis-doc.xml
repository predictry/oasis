<?xml version="1.0" encoding="UTF-8"?>

<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" lang="en">
<info>
<title>Oasis Documentation</title>
<date>2015-07-23</date>
</info>
<section xml:id="_getting_started">
<title>Getting Started</title>
<simpara>OMS is orchestration tool for service providers. Service providers (SP) are independent systems, that optionally implement
a defined set of REST services that can be requested from OMS. Despite being independent, each SP has to be registered
in the OMS.</simpara>
<figure>
<mediaobject>
<imageobject>
<imagedata fileref="oms-infrastructure.png"/>
</imageobject>
<textobject><phrase>Overview</phrase></textobject>
</mediaobject>
</figure>
<simpara>The goal of the OMS is to manage the configuration of services to be provisioned for each tenant. A service is specific
operational task that may require input, and/or generates output. Examples of services are data harvesting (importing
data into a data store), computing recommendations, run optimisation trials, i.e. A/B testing; SPs are geared at
executing these tasks which are configured through the OMS.</simpara>
</section>
<section xml:id="_service_provider">
<title>Service Provider</title>
<simpara>Service providers are any applications that implements REST services that defined by OMS.</simpara>
<simpara>For heartbeat checking from OMS, service provider must implements <literal>/heartbeat</literal> endpoint which should return the following
JSON is nothing is wrong:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
   "ok": true
}</programlisting>
<simpara>Because heartbeat is performed repeateadly by OMS, the implementation of this API should be lightweight.</simpara>
<simpara>OMS will execute a job in SP by invoking <literal>/execute/{jobId}</literal> using POST method.  <literal>jobId</literal> is a value that is generated by
OMS to identify a individual job.  This POST method also contains Json payload that is previously configured in OMS.  This
 payload can be in any format.  For example, OMS may invoke <literal>/execute/123</literal> to run job id 123 with the following Json:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
   "param1": "value1",
   "param2": "value2",
   "param3": "value3"
}</programlisting>
<simpara>To retrieve the execution status of a job, OMS will invoke a GET request to <literal>/execute/{jobId}</literal> in service provider.  If the job
is done successfully, the API implementation should return the following Json:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
   "done": true,
   "at": "2015-01-01T10:00:00"   //  <co xml:id="CO1-1"/>
}</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>Date in ISO format</para>
</callout>
</calloutlist>
<simpara>If the job is not done yet, the API implementation should return the following Json:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
   "done": false
}</programlisting>
<simpara>If there is an error while executing the job, the API implementation should return the following Json:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
   "done": false,
   "at": "2015-01-01T10:00:00",   <co xml:id="CO2-1"/>
   "error": "the error message"
}</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>Date in ISO format when the error was encountered, or <literal>null</literal> if this information is not available.</para>
</callout>
</calloutlist>
<tip>
<simpara>OMS doesn&#8217;t dictate how service provider should be implemented.  If you have closed source service provider or you can&#8217;t
change the service provider to provide API implementations required by OMS, you can create a new implementation
service provider as a router to the existing service provider.  This new service provider will provide API implementations
 for OMS and routes requests from OMS to one or more existing service providers.</simpara>
</tip>
</section>
</article>