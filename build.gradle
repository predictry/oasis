buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.3'
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.2'
    }
}

apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.asciidoctor.gradle.asciidoctor'
apply plugin: 'com.bmuschko.tomcat'

sourceCompatibility = 1.8
version = '0.1'

configurations {
    sshAntTask
    jdbcDriver
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

war {
    archiveName = 'oasis.war'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    // Spring Framework         
    compile 'org.springframework:spring-webmvc:4.1.6.RELEASE'
    compile 'org.springframework:spring-aspects:4.1.6.RELEASE'
    compile 'org.springframework:spring-test:4.1.6.RELEASE'
    compile 'org.springframework.data:spring-data-jpa:1.8.1.RELEASE'
    compile 'org.springframework:spring-context-support:4.1.6.RELEASE'
    
    // Hibernate
    compile 'org.hibernate:hibernate-entitymanager:4.3.9.Final'
    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    compile 'org.jadira.usertype:usertype.jodatime:2.0.1'
    
    // Thymeleaf
    compile 'org.thymeleaf:thymeleaf-spring4:2.1.4.RELEASE'
    
    // Database
    compile 'mysql:mysql-connector-java:5.1.36'
    jdbcDriver 'mysql:mysql-connector-java:5.1.36'

    // Others
    compile 'org.quartz-scheduler:quartz:2.2.1'

    // Others
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'joda-time:joda-time:2.7'
    compile 'joda-time:joda-time-hibernate:1.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.3'
    compile 'javax:javaee-web-api:7.0'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.4.0'
    runtime 'org.slf4j:slf4j-log4j12:1.7.12'
    runtime 'log4j:log4j:1.2.15'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    sshAntTask 'org.apache.ant:ant-jsch:1.9.5', 'com.jcraft:jsch:0.1.53'
    
    def tomcatVersion = '7.0.59'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
}

/*
ant.taskdef(name: 'scp', classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp', 
    classpath: configurations.sshAntTask.asPath)

*/

checkstyle {
    sourceSets = [sourceSets.main]
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

asciidoctor {
    backends = ['html5']
    baseDir = file("${projectDir}/src/asciidoc")
    outputDir = file("${projectDir}/doc")
    options = [
        attributes: [
            'revnumber': version
        ]
    ]
}

task createQuartzTables << {
    Properties props = new Properties()
    props.load(new FileInputStream(file("src/main/resources/quartz.properties")))
    URLClassLoader loader = GroovyObject.class.classLoader
    configurations.jdbcDriver.each { File file ->
        loader.addURL(file.toURL())
    }
    def sql = groovy.sql.Sql.newInstance(props['org.quartz.dataSource.quartzDataSource.URL'] + "?allowMultiQueries=true", 
        props['org.quartz.dataSource.quartzDataSource.user'], 
        props['org.quartz.dataSource.quartzDataSource.password'], 
        props['org.quartz.dataSource.quartzDataSource.driver'])
    String sqlText = file("src/main/resources/tables_mysql_innodb.sql").text
    sql.execute(sqlText)
    sql.close()
}